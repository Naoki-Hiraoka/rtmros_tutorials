(defun get-hrp2-with-hand-class-methods ()
 '(
  (:hand (arm method &rest args)
   (if (or (equal arm :both) (equal arm :arms))
       (list (send* self :hand :rarm args) (send* self :hand :larm args))
       (case method
         (:joint-list (case arm
                        (:rarm (list (send self :R_THUMBCM_Y)
                                     (send self :R_THUMBCM_P)
                                     (send self :R_INDEXMP_R)
                                     (send self :R_INDEXMP_P)
                                     (send self :R_INDEXPIP_R)
                                     (send self :R_MIDDLEPIP_R)))
                        (:larm (list (send self :L_THUMBCM_Y)
                                     (send self :L_THUMBCM_P)
                                     (send self :L_INDEXMP_R)
                                     (send self :L_INDEXMP_P)
                                     (send self :L_INDEXPIP_R)
                                     (send self :L_MIDDLEPIP_R)))))
         (:links (case arm
                   (:rarm (list (send self :R_THUMBCM_Y_LINK_lk)
                                (send self :R_THUMBCM_P_LINK_lk)
                                (send self :R_INDEXMP_R_LINK_lk)
                                (send self :R_INDEXMP_P_LINK_lk)
                                (send self :R_INDEXPIP_R_LINK_lk)
                                (send self :R_MIDDLEPIP_R_LINK_lk)))
                   (:larm (list (send self :L_THUMBCM_Y_LINK_lk)
                                (send self :L_THUMBCM_P_LINK_lk)
                                (send self :L_INDEXMP_R_LINK_lk)
                                (send self :L_INDEXMP_P_LINK_lk)
                                (send self :L_INDEXPIP_R_LINK_lk)
                                (send self :L_MIDDLEPIP_R_LINK_lk)))))
         (:angle-vector (if args
                            (progn
                              (mapcar #'(lambda (j a) (send j :joint-angle a))
                                      (send self :hand arm :joint-list) (coerce (car args) cons))
                              (send self :hand arm :angle-vector))
                            (coerce (mapcar #'(lambda (j) (send j :joint-angle))
                                            (send self :hand arm :joint-list)) float-vector)))
         (:open-pose (send self :hand arm :angle-vector (float-vector  0 60 -10 30  0  0)))
         (:preclose-pose (send self :hand arm :angle-vector (float-vector  40  60 -10  35  10 90)))
         (:close-pose (send self :hand arm :angle-vector (float-vector  65   0  30  50  90 90)))
         (:reset-pose (send self :hand arm :angle-vector (float-vector  0 0 0 0 0 0)))
         (:standard-pose (send self :hand arm :angle-vector (float-vector  20 90 0 10 -20 -20)))
         (:hook-pose (send self :hand arm :angle-vector (float-vector  90 90 0 10 -20 -20)))
         (:index-pose (send self :hand arm :angle-vector (float-vector  60 90 0 70 -20 -20)))
         (:extension-pose (send self :hand arm :angle-vector (float-vector  90 30 0 10 -20 -20)))
         (:distal-pose (send self :hand arm :angle-vector (float-vector  50 60 -20 10 20 40)))
         (:hook-pose2 (send self :hand arm :angle-vector (float-vector  90 70 0 10 -20 -40)))
         (:distal-pose2 (send self :hand arm :angle-vector (float-vector  90 90 -20 10 20 60)))
         (:grasp-pose (send self :hand arm :angle-vector (float-vector 77.9709 -11.4732 8.28742 -16.3569 106.185 86.0974)))
         (:index-avoid-extention-pose2 (send self :hand arm :angle-vector (float-vector 90.0 -30.0 -10.0 10.0 -40.0 -40.0)))
         (:index-avoid-hook-pose (send self :hand arm :angle-vector (float-vector  90 90 -10 -10 -40 -20)))
         (:index-avoid-reset-pose (send self :hand arm :angle-vector (float-vector  0 0 -10 -10 -40 0)))
         (:index-avoid-hook-pose2 (send self :hand arm :angle-vector (float-vector  90 70 -10 -10 -40 -40)))
         (:index-avoid-distal-pose (send self :hand arm :angle-vector (float-vector  50 60 -10 -10 -40 40)))
         (:index-avoid-grasp-pose (send self :hand arm :angle-vector (float-vector 77.9709 -11.4732 -10 -10 -40 86.0974)))
         (:t-1y (case arm
                  (:rarm (send* (send self :R_THUMBCM_Y) method args))
                  (:larm (send* (send self :L_THUMBCM_Y) method args))))
         (:t-1p (case arm
                  (:rarm (send* (send self :R_THUMBCM_P) method args))
                  (:larm (send* (send self :L_THUMBCM_P) method args))))
         (:f1-1r (case arm
                   (:rarm (send* (send self :R_INDEXMP_R) method args))
                   (:larm (send* (send self :L_INDEXMP_R) method args))))
         (:f1-1p (case arm
                   (:rarm (send* (send self :R_INDEXMP_P) method args))
                   (:larm (send* (send self :L_INDEXMP_P) method args))))
         (:f1-2r (case arm
                   (:rarm (send* (send self :R_INDEXPIP_R) method args))
                   (:larm (send* (send self :L_INDEXPIP_R) method args))))
         (:f2-2r (case arm
                   (:rarm (send* (send self :R_MIDDLEPIP_R) method args))
                   (:larm (send* (send self :L_MIDDLEPIP_R) method args))))
         )))
  (:hand-angle-vector
   (&optional (av))
   (when av
     (send self :hand :rarm :angle-vector (subseq av 0 6))
     (send self :hand :larm :angle-vector (subseq av 6))
     )
   (concatenate float-vector
                (send self :hand :rarm :angle-vector)
                (send self :hand :larm :angle-vector))
   )
  )
 )
