static pointer (*ftab[1])();

#define QUOTE_STRINGS_SIZE 12
static char *quote_strings[QUOTE_STRINGS_SIZE]={
    "((:open-pose nil (send self :angle-vector (float-vector 0 60 -10 30 0 0))) (:preclose-pose nil (send self :angle-vector (float-vector 40 60 -10 35 10 90))) (:close-pose nil (send self :angle-vector (float-vector 65 0 30 50 90 90))) (:reset-pose nil (send self :angle-vector (float-vector 0 0 0 0 0 0))) (:standard-pose nil (send self :angle-vector (float-vector 20 90 0 10 -20 -20))) (:hook-pose nil (send self :angle-vector (float-vector 90 90 0 10 -20 -20))) (:index-pose nil (send self :angle-vector (float-vector 60 90 0 70 -20 -20))) (:extension-pose nil (send self :angle-vector (float-vector 90 30 0 10 -20 -20))) (:distal-pose nil (send self :angle-vector (float-vector 50 60 -20 10 20 40))) (:hook-pose2 nil (send self :angle-vector (float-vector 90 70 0 10 -20 -40))) (:distal-pose2 nil (send self :angle-vector (float-vector 90 90 -20 10 20 60))) (:grasp-pose nil (send self :angle-vector (float-vector 77.9709 -11.4732 8.28742 -16.3569 106.185 86.0974))) (:index-avoid-extention-pose2 nil (send self :angle-vector (float-vector 90.0 -30.0 -10.0 10.0 -40.0 -40.0))) (:def-index-avoid-pose-methods nil (dolist (pose (list :hook-pose :reset-pose :hook-pose2 :distal-pose2 :grasp-pose)) (eval (cons 'defmethod (cons (send (class self) :name) (list (cons (read-from-string (format nil \":index-avoid-~A\" (string-downcase pose))) (cons (cons '&optional (list (cons 'index-angle-vector (list (cons 'float-vector (cons '-10 (cons '-10 (list '-40)))))))) (cons (cons 'send (cons 'self (list pose))) (cons (cons 'send (cons 'self (cons ':f1-1r (cons ':joint-angle (list (cons 'elt (cons 'index-angle-vector (list '0)))))))) (cons (cons 'send (cons 'self (cons ':f1-1p (cons ':joint-angle (list (cons 'elt (cons 'index-angle-vector (list '1)))))))) (cons (cons 'send (cons 'self (cons ':f1-2r (cons ':joint-angle (list (cons 'elt (cons 'index-angle-vector (list '2)))))))) (list (cons 'send (cons 'self (list ':angle-vector)))))))))))))))) (:f1-1r (&rest args) (forward-message-to (send self (read-from-string (format nil \"~A-f1-1r\" (find-if #'(lambda (x) (send self x)) '(:rarm :larm))))) args)) (:f1-1p (&rest args) (forward-message-to (send self (read-from-string (format nil \"~A-f1-1p\" (find-if #'(lambda (x) (send self x)) '(:rarm :larm))))) args)) (:f1-2r (&rest args) (forward-message-to (send self (read-from-string (format nil \"~A-f1-2r\" (find-if #'(lambda (x) (send self x)) '(:rarm :larm))))) args)) (:f2-2r (&rest args) (forward-message-to (send self (read-from-string (format nil \"~A-f2-2r\" (find-if #'(lambda (x) (send self x)) '(:rarm :larm))))) args)) (:t-1y (&rest args) (forward-message-to (send self (read-from-string (format nil \"~A-t-1y\" (find-if #'(lambda (x) (send self x)) '(:rarm :larm))))) args)) (:t-1p (&rest args) (forward-message-to (send self (read-from-string (format nil \"~A-t-1p\" (find-if #'(lambda (x) (send self x)) '(:rarm :larm))))) args)))",
    "((:init (&rest args) (prog1 (send* self :init-org args) (send self :put :lhand-model (instance hrp3hand_l-robot :init)) (send self :put :rhand-model (instance hrp3hand_r-robot :init)) (dolist (h (list (send self :get :lhand-model) (send self :get :rhand-model))) (send h :def-index-avoid-pose-methods)) (mapcar #'(lambda (l lm) (send (send self :get lm) :newcoords (send (send self l :end-coords :parent) :copy-worldcoords)) (send (send self l :end-coords :parent) :assoc (send self :get lm))) '(:larm :rarm) '(:lhand-model :rhand-model)) (setq bodies (append bodies (send (send self :get :lhand-model) :bodies) (send (send self :get :rhand-model) :bodies))))) (:hand (arm &rest args) (let (hr ret) (case arm (:larm (setq hr (send self :get :lhand-model)) (setq ret (forward-message-to hr args))) (:rarm (setq hr (send self :get :rhand-model)) (setq ret (forward-message-to hr args))) ((:both :arms) (setq hr (send self :get :lhand-model)) (push (forward-message-to hr args) ret) (setq hr (send self :get :rhand-model)) (push (forward-message-to hr args) ret))) ret)) (:hand-angle-vector (&optional (av)) (when av (send self :hand :rarm :angle-vector (subseq av 0 6)) (send self :hand :larm :angle-vector (subseq av 6))) (concatenate float-vector (send self :hand :rarm :angle-vector) (send self :hand :larm :angle-vector))))",
    "\"package://hrpsys_ros_bridge_tutorials/models/hrp3hand_l\"",
    "load",
    "\"package://hrpsys_ros_bridge_tutorials/models/hrp3hand_r\"",
    "get-hrp3hand-class-methods",
    "\"nil\"",
    "get-hrp2-with-hand-class-methods",
    "\"nil\"",
    "defmethod",
    "hrp3hand_l-robot",
    "hrp3hand_r-robot",
  };
